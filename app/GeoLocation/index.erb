<script type="text/javascript">
<!--
function updateLocation(lat, lng) {
     $('span.geoLat').html(lat);
     $('span.geoLng').html(lng);
}
-->
</script>


<div align="center">
    <p>To get current location - Go outside building and wait 5-10 minutes</p>
	<!--p>Your location using geo-tags:</p>
	<geolocation></geolocation>
	<br/>
	Latitude: <geolatitude></geolatitude><br/>
	Longitude: <geolongitude></geolongitude>
	<br/-->
	
	<p>Your location using ruby api:</p>
	<p>
<% if System::get_property('platform') != 'WINDOWS' %>
	<a href="/system/map?q=<%= GeoLocation.latitude.to_s+','+GeoLocation.longitude.to_s %>"><%= GeoLocation.latitude.abs.to_s + " " + (GeoLocation.latitude < 0 ? "South" : "North") + ", " +
	GeoLocation.longitude.abs.to_s + " " + (GeoLocation.longitude < 0 ? "West" : "East") %></a>
<% else %>          
	<a href="<%= url_for :controller => :Settings, :action => :not_supported, :query => {:feature => 'Native Map'} %>" ><%= GeoLocation.latitude.abs.to_s + " " + (GeoLocation.latitude < 0 ? "South" : "North") + ", " +
	GeoLocation.longitude.abs.to_s + " " + (GeoLocation.longitude < 0 ? "West" : "East") %></a>
<% end %>      
    
	</p>
	<p>
	Latitude: <span class="geoLat"><%= GeoLocation.latitude.to_s %></span><br/>
	Longitude: <span class="geoLng"><%= GeoLocation.longitude.to_s %></span>
	</p>

<% if System::get_property('platform') != 'WINDOWS' %>
		<p><a href="/app/GeoLocation/showmap?latitude=<%= GeoLocation.latitude.to_s%>&longitude=<%= GeoLocation.longitude.to_s%>&provider=Google"
			target="_self">[show Google map at location <%= GeoLocation.latitude.to_s%>,<%= GeoLocation.longitude.to_s%> ]</a></p>
    
		<p><a href="/app/GeoLocation/showmap_250?latitude=<%= GeoLocation.latitude.to_s%>&longitude=<%= GeoLocation.longitude.to_s%>&provider=Google"
			target="_self">[show Google map at location <%= GeoLocation.latitude.to_s%>,<%= GeoLocation.longitude.to_s%> with 2500 pins]</a></p>

        <p><a href="/app/GeoLocation/showmap_coding?provider=Google" target="_self">[show Google map at location : NG10 3XL ]</a></p>    
    
<% else %>      
		<p><a href="<%= url_for :controller => :Settings, :action => :not_supported, :query => {:feature => 'Google Map'} %>"
			target="_self">[show Google map at location <%= GeoLocation.latitude.to_s%>,<%= GeoLocation.longitude.to_s%> ]</a></p>
    
<% end %>      

    <% if System::get_property('platform') == 'WINDOWS' || System::get_property('platform') == 'ANDROID'%>    
		<p><a href="/app/GeoLocation/showmap?latitude=<%= GeoLocation.latitude.to_s%>&longitude=<%= GeoLocation.longitude.to_s%>&provider=RhoGoogle"
			target="_self">[show RhoGoogle map at location <%= GeoLocation.latitude.to_s%>,<%= GeoLocation.longitude.to_s%> ]</a></p>
    
		<p><a href="/app/GeoLocation/showmap?latitude=<%= GeoLocation.latitude.to_s%>&longitude=<%= GeoLocation.longitude.to_s%>&provider=OSM"
			target="_self">[show OSM map at location <%= GeoLocation.latitude.to_s%>,<%= GeoLocation.longitude.to_s%> ]</a></p>

        <% if System::get_property('platform') != 'WINDOWS' %>
		    <p><a href="/app/GeoLocation/preload_map?provider=OSM&map_type=roadmap"
			    target="_self">preload OSM map for Saint-Petersburg </a></p>
        <% end %>                  
        
    <% end %>      

    
<br>
		<p><a href="/app/GeoLocation/showmap?latitude=<%= GeoLocation.latitude.to_s%>&longitude=<%= GeoLocation.longitude.to_s%>&provider=ESRI"
			target="_self">[show ESRI map at location <%= GeoLocation.latitude.to_s%>,<%= GeoLocation.longitude.to_s%> ]</a></p>

		<p><a href="/app/GeoLocation/showmap_250?latitude=<%= GeoLocation.latitude.to_s%>&longitude=<%= GeoLocation.longitude.to_s%>&provider=ESRI"
			target="_self">[show ESRI map at location <%= GeoLocation.latitude.to_s%>,<%= GeoLocation.longitude.to_s%> with 250 pins]</a></p>

        <p><a href="/app/GeoLocation/showmap_coding?provider=ESRI" target="_self">[show ESRI map at location : NG10 3XL ]</a></p>    
    
<% if System::get_property('platform') == 'APPLE' or System::get_property('platform') == 'ANDROID' %>
  <a href='/app/ESRI'>[show ESRI map]</a><br/>
<% end %>

        <p>Static Google map at location <%= GeoLocation.latitude.to_s%>,<%= GeoLocation.longitude.to_s%>:<br>
            <img src="http://maps.googleapis.com/maps/api/staticmap?center=<%= GeoLocation.latitude.to_s%>,<%= GeoLocation.longitude.to_s%>&zoom=12&size=200x200&format=png32&sensor=true">
            </img> 
        </p>

	<p>Distance calculation test:</p>
	<p> Distance between Washington, D.C. and Moscow, Russia: expected  4856.99 miles, geolocation returns
	<%= GeoLocation.haversine_distance(38.895, -77.036667, 55.755786, 37.617633).to_s %> miles
	</p>
	<p> Distance between Washington, D.C. and New York: expected 204.34 miles, geolocation returns
	<%= GeoLocation.haversine_distance(38.895, -77.036667, 40.716667, -74).to_s %> miles
	</p>

<br>

<% if System::get_property('platform') == 'APPLE' or System::get_property('platform') == 'ANDROID' or System::get_property('platform') == 'WINDOWS' %>

Enter adress for GeoCoding : <br>
  <input id="id_adress" type="text" name="id_adress" value=""></input> <br>
  <INPUT type="button" id="id_button_geo" value="request coordinates" name="id_button_geo" onClick="onGeoCodingRequest();">
  <br>
Enter coordinates for GeoCoding : <br>
  Latitude :<input id="id_latitude" type="text" name="id_latitude" value=""></input> <br>
  Longitude :<input id="id_longitude" type="text" name="id_longitude" value=""></input> <br>
  <INPUT type="button" id="id_button_geo_inverse" value="request adress" name="id_button_geo_inverse" onClick="onGeoCodingInverseRequest();">

<% end %>


</div>

<% if System::get_property('platform') == 'APPLE' or System::get_property('platform') == 'ANDROID' %>

<script type="text/javascript">

function onGeoCodingRequest() {
  $.get('/app/GeoLocation/on_geocoding', { adress: document.getElementById("id_adress").value});
  return false;
}

function onGeoCodingInverseRequest() {
  $.get('/app/GeoLocation/on_geocoding_inverse', { latitude: document.getElementById("id_latitude").value, longitude: document.getElementById("id_longitude").value});
  return false;
}

</script>

<% end %>




<%if System::get_property('platform') == 'WINDOWS' %>


<script type="text/javascript">


var xmlHttpReq = null;

function setTag(tag,value) {
	if (document.getElementsByTagName) {
		var el=document.getElementsByTagName(tag);
		for (i=0;i<el.length;i++) {
			el[i].innerText = value;
  		}
	}
}

function ajaxCall(url)
{
  //alert("ajaxCall() START");
        //Construct an XMLHTTP Object to handle our HTTP Request
        if (xmlHttpReq != null){
		xmlHttpReq = null;
	}
	if (xmlHttpReq == null) {
		try { xmlHttpReq = new ActiveXObject("Msxml2.XMLHTTP"); }
        	catch(e) {}
	}
	if (xmlHttpReq == null) {
		try { xmlHttpReq = new ActiveXObject("Microsoft.XMLHTTP"); }
        	catch(e) {}
	}
	if (xmlHttpReq == null) {
        	alert("Can't make the call - xmlHttpReq is not available");
        	return;
	}
	//alert("about to open xmlHttpReq");
	xmlHttpReq.open("GET", url, true);
        //xmlHttpReq.onreadystatechange = doHttpReadyStateChange;
	//alert("about to send Req");
   	xmlHttpReq.send();
}

function ajaxCallWithParam(url, param_name, param_value)
{
  //alert("ajaxCallWithParam() START");
        //Construct an XMLHTTP Object to handle our HTTP Request
        if (xmlHttpReq != null){
		xmlHttpReq = null;
	}
	if (xmlHttpReq == null) {
		try { xmlHttpReq = new ActiveXObject("Msxml2.XMLHTTP"); }
        	catch(e) {}
	}
	if (xmlHttpReq == null) {
		try { xmlHttpReq = new ActiveXObject("Microsoft.XMLHTTP"); }
        	catch(e) {}
	}
	if (xmlHttpReq == null) {
        	alert("Can't make the call - xmlHttpReq is not available");
        	return;
	}
  //alert("ajaxCallWithParam() 2");
	//alert("about to open xmlHttpReq");
        var params = param_name+'=' + encodeURIComponent(param_value);
  //alert("ajaxCallWithParam() 3");
	xmlHttpReq.open("GET", url+'?&'+params, true);
  //alert("ajaxCallWithParam() 4");
        //xmlHttpReq.onreadystatechange = doHttpReadyStateChange;
	//alert("about to send Req");
   	xmlHttpReq.send();
  //alert("ajaxCallWithParam() FINISH");
}

function ajaxCallWithParam2(url, param_name, param_value, param_name2, param_value2)
{
  //alert("ajaxCallWithParam() START");
        //Construct an XMLHTTP Object to handle our HTTP Request
        if (xmlHttpReq != null){
		xmlHttpReq = null;
	}
	if (xmlHttpReq == null) {
		try { xmlHttpReq = new ActiveXObject("Msxml2.XMLHTTP"); }
        	catch(e) {}
	}
	if (xmlHttpReq == null) {
		try { xmlHttpReq = new ActiveXObject("Microsoft.XMLHTTP"); }
        	catch(e) {}
	}
	if (xmlHttpReq == null) {
        	alert("Can't make the call - xmlHttpReq is not available");
        	return;
	}
  //alert("ajaxCallWithParam() 2");
	//alert("about to open xmlHttpReq");
        var params = '&' + param_name+'=' + encodeURIComponent(param_value) + '&' + param_name2+'=' + encodeURIComponent(param_value2);
  //alert("ajaxCallWithParam() 3");
	xmlHttpReq.open("GET", url+'?'+params, true);
  //alert("ajaxCallWithParam() 4");
        //xmlHttpReq.onreadystatechange = doHttpReadyStateChange;
	//alert("about to send Req");
   	xmlHttpReq.send();
  //alert("ajaxCallWithParam() FINISH");
}



function onGeoCodingRequest() {
  ajaxCallWithParam('/app/GeoLocation/on_geocoding', 'adress', document.getElementById("id_adress").value);
  return false;
}

function onGeoCodingInverseRequest() {
  ajaxCallWithParam('/app/GeoLocation/on_geocoding_inverse', 'latitude', document.getElementById("id_latitude").value , 'longitude', document.getElementById("id_longitude").value);
  return false;
}


</script>

<% end %>




